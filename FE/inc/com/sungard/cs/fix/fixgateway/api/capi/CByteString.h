///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'com.sungard.cs.fix.fixgateway.api.capi.CByteString

#if !defined COM_SUNGARD_CS_FIX_FIXGATEWAY_API_CAPI_CBYTESTRING_H
#define COM_SUNGARD_CS_FIX_FIXGATEWAY_API_CAPI_CBYTESTRING_H

#include "com/sungard/cs/fix/fixgateway/api/capi/CByteString_stub.h"

//These incudes are needed for the methods of the Stub
#include "com/mintech/utils/fmi/builtin/arrays/FByteArray.h"

using namespace com::mintech::utils::fmi;

namespace com{
	namespace sungard{
		namespace cs{
			namespace fix{
				namespace fixgateway{
					namespace api{
						namespace capi{
class CByteString;

class DLL_EXPORT CByteString : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//CByteString Public methods
	jint getLength();

	FByteArray getArr();

	string getStr();

//End of CByteString Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	CByteString();

	//Copy constructor
	CByteString(const CByteString& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	CByteString(CByteString_stub* stub);

	//Constructor with jobject for returned objects
	CByteString(jobject obj);

	//Constructor with const int for handling NULL
	CByteString(const int null);

	//Set the stub
	void setStub(CByteString_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	CByteString& operator=(const CByteString& copy);

	//operator= for NULL
	CByteString& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(CByteString& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(CByteString& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}}}}}}} //Close namespace



#endif
