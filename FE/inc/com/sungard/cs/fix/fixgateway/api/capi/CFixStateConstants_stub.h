///////////////////////////////////////////////////////////////////////
// this header file was generated by FMI code generator.
// FMI Version: 7.6; Build: 2
// it represents the Java object 'CFixStateConstants'.
// this file includes the necessary wrappings for the JNI calls to the Java object.


#if !defined COM_SUNGARD_CS_FIX_FIXGATEWAY_API_CAPICFIXSTATECONSTANTS_STUB_H
	#define COM_SUNGARD_CS_FIX_FIXGATEWAY_API_CAPICFIXSTATECONSTANTS_STUB_H


#include "com/sungard/cs/fix/fixgateway/api/capi/CFixStateConstants_interface.h"


namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class JNIException;
}}}}

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class FMIException;
}}}}

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
				namespace builtin{
					namespace arrays{
class FObjectArray;
}}}}}} // close namespace

namespace com{
	namespace sungard{
		namespace cs{
			namespace fix{
				namespace fixgateway{
					namespace api{
						namespace capi{
class CFixStateConstants;
}}}}}}} // close namespace

namespace java{
	namespace lang{
class String;
}} // close namespace


using com::mintech::utils::fmi::JNIException;
using com::mintech::utils::fmi::builtin::arrays::FObjectArray;
using com::sungard::cs::fix::fixgateway::api::capi::CFixStateConstants;
using java::lang::String;

namespace com{
	namespace sungard{
		namespace cs{
			namespace fix{
				namespace fixgateway{
					namespace api{
						namespace capi{
class CFixStateConstants_stub;


class DLL_EXPORT CFixStateConstants_stub : public CFixStateConstants_interface
{
public:
//////////////////////
// public Constructors
// these constructors are for the C++ stubs. They do not create Java objects!

	// default constructor
	CFixStateConstants_stub();

	// constructor with jobject parameter for methods that return this object
	CFixStateConstants_stub(jobject obj);

	// destructor
	~CFixStateConstants_stub();

//////////////////
// utility methods
	// initialize all the IDs
	static void initialize();

	// get the object's full name
	virtual const char* getFullName();

	// get the class holder
	jclass getCls();

// end utility methods
//////////////////////

///////////////////////////////////////
// public methods from java.lang.object
	string toString();


// end of methods from java.lang.Object
///////////////////////////////////////

//////////////////////////////
// public data members methods
	////////////////////////////////////////
	// public data members retrieval methods
	//'final' fields
	static jint get_CLOSED();

	static jint get_CONNECTING();

	static jint get_OPEN();

	static jint get_DISCONNECTING();

	static jint get_ERROR();

	static FObjectArray get_stateDescr();

	static jint get_OFF_THE_SHELF_APPLICATION_STOPPED();

	static jint get_OFF_THE_SHELF_APPLICATION_STARTED();

	static FObjectArray get_appStateDescr();

	static jint get_API_REQUEST();

	static jint get_PARTNER_REQUEST();

	static jint get_ENCRYPTION_PROBLEM();

	static jint get_CONNECTION_REFUSED();

	static jint get_PARTNER_REJECT();

	static jint get_SEQUENCE_NUMBER();

	static jint get_COMM_PROBLEM();

	static jint get_IN_SYNC();

	static jint get_DATA_PROB();

	static FObjectArray get_reasonDescr();

	//////////////////////////////////
	// public data members set methods
//end public data members methods
/////////////////////////////////

private:
	// indicates if an instance of this stub has already been created
	static bool m_firstTime;

	// class holder (defined static to allow accessibility to static methods)
	static jclass m_cls;

	// the object's full name
	static char* m_objectName;

private:
	// java.lang.Class getName() method's ID
	static jmethodID m_getName_method_ID;

	// java.lang.Object Methods' IDs
	static jmethodID method_1_ID;

	// IDs for static data members
	static jfieldID staticField_1_ID;
	static jfieldID staticField_2_ID;
	static jfieldID staticField_3_ID;
	static jfieldID staticField_4_ID;
	static jfieldID staticField_5_ID;
	static jfieldID staticField_6_ID;
	static jfieldID staticField_7_ID;
	static jfieldID staticField_8_ID;
	static jfieldID staticField_9_ID;
	static jfieldID staticField_10_ID;
	static jfieldID staticField_11_ID;
	static jfieldID staticField_12_ID;
	static jfieldID staticField_13_ID;
	static jfieldID staticField_14_ID;
	static jfieldID staticField_15_ID;
	static jfieldID staticField_16_ID;
	static jfieldID staticField_17_ID;
	static jfieldID staticField_18_ID;
	static jfieldID staticField_19_ID;

};


}}}}}}} // close namespace

#endif
