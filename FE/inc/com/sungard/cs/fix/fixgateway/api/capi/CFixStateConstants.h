///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'com.sungard.cs.fix.fixgateway.api.capi.CFixStateConstants



#if !defined COM_SUNGARD_CS_FIX_FIXGATEWAY_API_CAPI_CFIXSTATECONSTANTS_H
	#define COM_SUNGARD_CS_FIX_FIXGATEWAY_API_CAPI_CFIXSTATECONSTANTS_H


#include "com/sungard/cs/fix/fixgateway/api/capi/CFixStateConstants_stub.h"



//These incudes are needed for the methods of the Stub
#include "com/sungard/cs/fix/fixgateway/api/capi/CFixStateConstants_interface.h"


using namespace com::mintech::utils::fmi;

namespace com{
	namespace sungard{
		namespace cs{
			namespace fix{
				namespace fixgateway{
					namespace api{
						namespace capi{

class CFixStateConstants;


class DLL_EXPORT CFixStateConstants : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object

//Public data members methods
	//Public data members retrieval methods
	//'final' fields
	static jint get_CLOSED();

	static jint get_CONNECTING();

	static jint get_OPEN();

	static jint get_DISCONNECTING();

	static jint get_ERROR();

	static FObjectArray get_stateDescr();

	static jint get_OFF_THE_SHELF_APPLICATION_STOPPED();

	static jint get_OFF_THE_SHELF_APPLICATION_STARTED();

	static FObjectArray get_appStateDescr();

	static jint get_API_REQUEST();

	static jint get_PARTNER_REQUEST();

	static jint get_ENCRYPTION_PROBLEM();

	static jint get_CONNECTION_REFUSED();

	static jint get_PARTNER_REJECT();

	static jint get_SEQUENCE_NUMBER();

	static jint get_COMM_PROBLEM();

	static jint get_IN_SYNC();

	static jint get_DATA_PROB();

	static FObjectArray get_reasonDescr();

	//Public data members set methods
//End public data members methods
//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	CFixStateConstants();

	//Copy constructor
	CFixStateConstants(const CFixStateConstants& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	CFixStateConstants(CFixStateConstants_stub* stub);

	//Constructor with jobject for returned objects
	CFixStateConstants(jobject obj);

	//Constructor with const int for handling NULL
	CFixStateConstants(const int null);

	//Set the stub
	void setStub(CFixStateConstants_interface* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	CFixStateConstants& operator=(const CFixStateConstants& copy);

	//operator= for NULL
	CFixStateConstants& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(CFixStateConstants& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(CFixStateConstants& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);

	//Casting methods
	static CFixStateConstants castFrom_Object(const Object& base);
};


}}}}}}} //Close namespace



#endif
