///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.util.Map



#if !defined JAVA_UTIL_MAP_H
	#define JAVA_UTIL_MAP_H


#include "java/util/Map_stub.h"



//These incudes are needed for the methods of the Stub
#include "java/util/Map_interface.h"


using namespace com::mintech::utils::fmi;

namespace java{
	namespace util{

class Map;


class DLL_EXPORT Map : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//Map Public methods
	java::lang::Object put(const Object& p1, const Object& p2);

	void clear();

	bool isEmpty();

	java::util::Set entrySet();

	java::lang::Object get(const Object& p1);

	void putAll(const Map& p1);

	jint size();

	java::util::Collection values();

	java::lang::Object remove(const Object& p1);

	java::util::Set keySet();

	bool containsKey(const Object& p1);

	bool containsValue(const Object& p1);

//End of Map Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	Map();

	//Copy constructor
	Map(const Map& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	Map(Map_stub* stub);

	//Constructor with jobject for returned objects
	Map(jobject obj);

	//Constructor with const int for handling NULL
	Map(const int null);

	//Set the stub
	void setStub(Map_interface* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	Map& operator=(const Map& copy);

	//operator= for NULL
	Map& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(Map& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(Map& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);

	//Casting methods
	static Map castFrom_Object(const Object& base);
};


}} //Close namespace



#endif
