///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.util.Set



#if !defined JAVA_UTIL_SET_H
	#define JAVA_UTIL_SET_H


#include "java/util/Set_stub.h"
#include "java/util/Collection.h"



//These incudes are needed for the methods of the Stub
#include "java/util/Set_interface.h"


namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class JNIException;
}}}}

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class FMIException;
}}}}

namespace java{
	namespace util{
class Collection;
}} //Close namespace


using namespace com::mintech::utils::fmi;
using namespace java::util;

namespace java{
	namespace util{

class Set;


class DLL_EXPORT Set :  public virtual java::util::Collection{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//Set Public methods
	bool add(const Object& p1);

	void clear();

	bool contains(const Object& p1);

	bool isEmpty();

	bool addAll(const Collection& p1);

	java::util::Iterator iterator();

	jint size();

	FObjectArray toArray();

	bool remove(const Object& p1);

	bool containsAll(const Collection& p1);

	bool removeAll(const Collection& p1);

	bool retainAll(const Collection& p1);

//End of Set Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	Set();

	//Copy constructor
	Set(const Set& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	Set(Set_stub* stub);

	//Constructor with jobject for returned objects
	Set(jobject obj);

	//Constructor with const int for handling NULL
	Set(const int null);

	//Set the stub
	void setStub(Set_interface* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	Set& operator=(const Set& copy);

	//operator= for NULL
	Set& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(Set& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(Set& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);

	//Casting methods
	static Set castFrom_Object(const Object& base);

	static Set castFrom_Collection(const Collection& base);

	static Set castFrom_Iterable(const Iterable& base);
};


}} //Close namespace



#endif
