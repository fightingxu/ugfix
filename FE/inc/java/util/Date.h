///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.util.Date



#if !defined JAVA_UTIL_DATE_H
	#define JAVA_UTIL_DATE_H


#include "java/util/Date_stub.h"


//These incudes are needed for the methods of the Stub


using namespace com::mintech::utils::fmi;

namespace java{
	namespace util{

class Date;


class DLL_EXPORT Date : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//Date Public methods
	jint compareTo(const Object& p1);

	jint compareTo(const Date& p1);

	java::lang::Object clone();

	static 	jlong parse(const string& p1);

	bool after(const Date& p1);

	bool before(const Date& p1);

	jint getDate();

	jint getHours();

	jint getMinutes();

	jint getMonth();

	jint getSeconds();

	jlong getTime();

	jint getYear();

	void setTime(const jlong p1);

	static 	jlong UTC(const jint p1, const jint p2, const jint p3, const jint p4, const jint p5, const jint p6);

	jint getDay();

	jint getTimezoneOffset();

	void setDate(const jint p1);

	void setHours(const jint p1);

	void setMinutes(const jint p1);

	void setMonth(const jint p1);

	void setSeconds(const jint p1);

	void setYear(const jint p1);

	string toGMTString();

	string toLocaleString();

//End of Date Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	Date();

	//Copy constructor
	Date(const Date& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	Date(Date_stub* stub);

	//Constructor with jobject for returned objects
	Date(jobject obj);

	//Constructor with const int for handling NULL
	Date(const int null);

	//Set the stub
	void setStub(Date_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	Date& operator=(const Date& copy);

	//operator= for NULL
	Date& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(Date& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(Date& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}} //Close namespace



#endif
