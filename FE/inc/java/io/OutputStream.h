///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.io.OutputStream



#if !defined JAVA_IO_OUTPUTSTREAM_H
	#define JAVA_IO_OUTPUTSTREAM_H


#include "java/io/OutputStream_stub.h"


//These incudes are needed for the methods of the Stub


using namespace com::mintech::utils::fmi;

namespace java{
	namespace io{

class OutputStream;


class DLL_EXPORT OutputStream : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//OutputStream Public methods
	/* throws java.io.IOException */
	void write(const jint p1);

	/* throws java.io.IOException */
	void close();

	/* throws java.io.IOException */
	void flush();

//End of OutputStream Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	OutputStream();

	//Copy constructor
	OutputStream(const OutputStream& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	OutputStream(OutputStream_stub* stub);

	//Constructor with jobject for returned objects
	OutputStream(jobject obj);

	//Constructor with const int for handling NULL
	OutputStream(const int null);

	//Set the stub
	void setStub(OutputStream_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	OutputStream& operator=(const OutputStream& copy);

	//operator= for NULL
	OutputStream& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(OutputStream& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(OutputStream& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}} //Close namespace



#endif
