///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.net.URL



#if !defined JAVA_NET_URL_H
	#define JAVA_NET_URL_H


#include "java/net/URL_stub.h"


//These incudes are needed for the methods of the Stub


using namespace com::mintech::utils::fmi;

namespace java{
	namespace net{

class URL;


class DLL_EXPORT URL : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//URL Public methods
	/* throws java.io.IOException */
	java::io::InputStream openStream();

	string getPath();

	string getAuthority();

	string getQuery();

	/* throws java.net.URISyntaxException */
	java::net::URI toURI();

	string getFile();

	string getHost();

	string getProtocol();

	/* throws java.io.IOException */
	java::net::URLConnection openConnection();

	string getRef();

	/* throws java.io.IOException */
	java::lang::Object getContent();

	jint getDefaultPort();

	jint getPort();

	string getUserInfo();

	bool sameFile(const URL& p1);

	string toExternalForm();

//End of URL Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	URL();

	//Copy constructor
	URL(const URL& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	URL(URL_stub* stub);

	//Constructor with jobject for returned objects
	URL(jobject obj);

	//Constructor with const int for handling NULL
	URL(const int null);

	//Set the stub
	void setStub(URL_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	URL& operator=(const URL& copy);

	//operator= for NULL
	URL& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(URL& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(URL& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}} //Close namespace



#endif
