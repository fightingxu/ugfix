///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.net.URI



#if !defined JAVA_NET_URI_H
	#define JAVA_NET_URI_H


#include "java/net/URI_stub.h"


//These incudes are needed for the methods of the Stub


using namespace com::mintech::utils::fmi;

namespace java{
	namespace net{

class URI;


class DLL_EXPORT URI : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//URI Public methods
	jint compareTo(const Object& p1);

	jint compareTo(const URI& p1);

	bool isAbsolute();

	static 	java::net::URI create(const string& p1);

	string getPath();

	string getAuthority();

	string getFragment();

	string getQuery();

	string getScheme();

	bool isOpaque();

	java::net::URI normalize();

	java::net::URI resolve(const URI& p1);

	java::net::URI resolve(const string& p1);

	/* throws java.net.MalformedURLException */
	java::net::URL toURL();

	string getHost();

	jint getPort();

	string getUserInfo();

	string getRawAuthority();

	string getRawFragment();

	string getRawPath();

	string getRawQuery();

	string getRawSchemeSpecificPart();

	string getRawUserInfo();

	string getSchemeSpecificPart();

	/* throws java.net.URISyntaxException */
	java::net::URI parseServerAuthority();

	java::net::URI relativize(const URI& p1);

	string toASCIIString();

//End of URI Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	URI();

	//Copy constructor
	URI(const URI& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	URI(URI_stub* stub);

	//Constructor with jobject for returned objects
	URI(jobject obj);

	//Constructor with const int for handling NULL
	URI(const int null);

	//Set the stub
	void setStub(URI_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	URI& operator=(const URI& copy);

	//operator= for NULL
	URI& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(URI& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(URI& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}} //Close namespace



#endif
