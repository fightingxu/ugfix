///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.lang.Object

#if !defined JAVA_LANG_OBJECT_H
#define JAVA_LANG_OBJECT_H

#include "java/lang/Object_stub.h"

//These incudes are needed for the methods of the Stub
#include "java/lang/Object_interface.h"

using namespace com::mintech::utils::fmi;

namespace java{
	namespace lang{
class Object;

class DLL_EXPORT Object{
public:
/////////////////////
//Public Stub methods

	jint hashCode();

	java::lang::Class getClass();

	/* throws java.lang.InterruptedException */
	void wait(const jlong p1, const jint p2);

	/* throws java.lang.InterruptedException */
	void wait();

	/* throws java.lang.InterruptedException */
	void wait(const jlong p1);

	bool equals(const Object& p1);

	string toString();

	void notify();

	void notifyAll();

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	Object();

	//Constructor for sub objects default constructor
	Object(void* stub);

	//Copy constructor
	Object(const Object& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	Object(Object_stub* stub);

	//Constructor with jobject for returned objects
	Object(jobject obj);

	//Constructor with const int for handling NULL
	Object(const int null);

	//A destructor exists only for Object
	~Object();

	//Set the stub
	void setStub(Object_interface* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	Object& operator=(const Object& copy);

	//operator= for NULL
	Object& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(Object& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(Object& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
	//Methods from Objeft_interface
	///////////////////////////////
	//get method for the object name
	virtual const char* getFullName() const;

	//get / set methods for the Java object reference
	virtual jobject getReference() const;

	virtual void setReference(jobject ref);

protected:
	//The wrapped stub
	Object_interface* stub;
};

}} //Close namespace

#endif