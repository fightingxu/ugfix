///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.lang.Class

#if !defined JAVA_LANG_CLASS_H
#define JAVA_LANG_CLASS_H


#include "java/lang/Class_stub.h"
#include "java/lang/Object.h"


//These incudes are needed for the methods of the Stub
#include "java/lang/Object_interface.h"
#include "com/mintech/utils/fmi/builtin/arrays/FObjectArray.h"


using namespace com::mintech::utils::fmi;

namespace java{
	namespace lang{

class Class;


class DLL_EXPORT Class : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//Class Public methods
	bool isInstance(const Object& p1);

	jint getModifiers();

	/* throws java.lang.ClassNotFoundException */
	static 	java::lang::Class forName(const string& p1, const jboolean p2, const ClassLoader& p3);

	/* throws java.lang.ClassNotFoundException */
	static 	java::lang::Class forName(const string& p1);

	string getName();

	java::lang::Class asSubclass(const Class& p1);

	java::lang::Object cast(const Object& p1);

	bool desiredAssertionStatus();

	java::lang::annotation::Annotation getAnnotation(const Class& p1);

	FObjectArray getAnnotations();

	string getCanonicalName();

	java::lang::ClassLoader getClassLoader();

	FObjectArray getClasses();

	java::lang::Class getComponentType();

	/* throws java.lang.SecurityException */
	FObjectArray getConstructors();

	FObjectArray getDeclaredAnnotations();

	/* throws java.lang.SecurityException */
	FObjectArray getDeclaredClasses();

	/* throws java.lang.SecurityException */
	FObjectArray getDeclaredConstructors();

	/* throws java.lang.NoSuchFieldException, java.lang.SecurityException */
	java::lang::reflect::Field getDeclaredField(const string& p1);

	/* throws java.lang.SecurityException */
	FObjectArray getDeclaredFields();

	/* throws java.lang.SecurityException */
	FObjectArray getDeclaredMethods();

	java::lang::Class getDeclaringClass();

	java::lang::Class getEnclosingClass();

	java::lang::reflect::Constructor getEnclosingConstructor();

	java::lang::reflect::Method getEnclosingMethod();

	FObjectArray getEnumConstants();

	/* throws java.lang.NoSuchFieldException, java.lang.SecurityException */
	java::lang::reflect::Field getField(const string& p1);

	/* throws java.lang.SecurityException */
	FObjectArray getFields();

	FObjectArray getGenericInterfaces();

	java::lang::reflect::Type getGenericSuperclass();

	FObjectArray getInterfaces();

	/* throws java.lang.SecurityException */
	FObjectArray getMethods();

	java::lang::Package getPackage();

	java::security::ProtectionDomain getProtectionDomain();

	java::net::URL getResource(const string& p1);

	java::io::InputStream getResourceAsStream(const string& p1);

	FObjectArray getSigners();

	string getSimpleName();

	java::lang::Class getSuperclass();

	FObjectArray getTypeParameters();

	bool isAnnotation();

	bool isAnnotationPresent(const Class& p1);

	bool isAnonymousClass();

	bool isArray();

	bool isAssignableFrom(const Class& p1);

	bool isEnum();

	bool isInterface();

	bool isLocalClass();

	bool isMemberClass();

	bool isPrimitive();

	bool isSynthetic();

	/* throws java.lang.InstantiationException, java.lang.IllegalAccessException */
	java::lang::Object newInstance();

//End of Class Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	Class();

	//Copy constructor
	Class(const Class& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	Class(Class_stub* stub);

	//Constructor with jobject for returned objects
	Class(jobject obj);

	//Constructor with const int for handling NULL
	Class(const int null);

	//Set the stub
	void setStub(Class_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	Class& operator=(const Class& copy);

	//operator= for NULL
	Class& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(Class& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(Class& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}} //Close namespace



#endif
