///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.lang.reflect.AccessibleObject

#if !defined JAVA_LANG_REFLECT_ACCESSIBLEOBJECT_H
	#define JAVA_LANG_REFLECT_ACCESSIBLEOBJECT_H

#include "java/lang/reflect/AccessibleObject_stub.h"

//These incudes are needed for the methods of the Stub
#include "com/mintech/utils/fmi/builtin/arrays/FObjectArray.h"

using namespace com::mintech::utils::fmi;

namespace java{
	namespace lang{
		namespace reflect{
class AccessibleObject;

class DLL_EXPORT AccessibleObject : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object

//AccessibleObject Public methods
	java::lang::annotation::Annotation getAnnotation(const Class& p1);

	FObjectArray getAnnotations();

	FObjectArray getDeclaredAnnotations();

	bool isAnnotationPresent(const Class& p1);

	bool isAccessible();

	/* throws java.lang.SecurityException */
	void setAccessible(const jboolean p1);

//End of AccessibleObject Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	AccessibleObject();

	//Copy constructor
	AccessibleObject(const AccessibleObject& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	AccessibleObject(AccessibleObject_stub* stub);

	//Constructor with jobject for returned objects
	AccessibleObject(jobject obj);

	//Constructor with const int for handling NULL
	AccessibleObject(const int null);

	//Set the stub
	void setStub(AccessibleObject_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	AccessibleObject& operator=(const AccessibleObject& copy);

	//operator= for NULL
	AccessibleObject& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(AccessibleObject& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(AccessibleObject& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};

}}} //Close namespace

#endif