///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.lang.reflect.Method



#if !defined JAVA_LANG_REFLECT_METHOD_H
	#define JAVA_LANG_REFLECT_METHOD_H


#include "java/lang/reflect/Method_stub.h"


//These incudes are needed for the methods of the Stub
#include "com/mintech/utils/fmi/builtin/arrays/FObjectArray.h"


namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class JNIException;
}}}}

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class FMIException;
}}}}

namespace java{
	namespace lang{
		namespace reflect{
class AccessibleObject;
}}} //Close namespace


using namespace com::mintech::utils::fmi;
using namespace java::lang::reflect;

namespace java{
	namespace lang{
		namespace reflect{

class Method;


class DLL_EXPORT Method : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//Method Public methods
	jint getModifiers();

	string getName();

	java::lang::annotation::Annotation getAnnotation(const Class& p1);

	FObjectArray getDeclaredAnnotations();

	java::lang::Class getDeclaringClass();

	FObjectArray getParameterTypes();

	java::lang::Class getReturnType();

	FObjectArray getTypeParameters();

	bool isSynthetic();

	string toGenericString();

	java::lang::Object getDefaultValue();

	FObjectArray getExceptionTypes();

	FObjectArray getGenericExceptionTypes();

	FObjectArray getGenericParameterTypes();

	java::lang::reflect::Type getGenericReturnType();

	FObjectArray getParameterAnnotations();

	bool isBridge();

	bool isVarArgs();

	FObjectArray getAnnotations();

	bool isAnnotationPresent(const Class& p1);

	bool isAccessible();

	/* throws java.lang.SecurityException */
	void setAccessible(const jboolean p1);

//End of Method Public methods

//Public data members methods
	//Public data members retrieval methods
	//'final' fields
	static jint get_PUBLIC();

	static jint get_DECLARED();

	//Public data members set methods
//End public data members methods
//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	Method();

	//Copy constructor
	Method(const Method& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	Method(Method_stub* stub);

	//Constructor with jobject for returned objects
	Method(jobject obj);

	//Constructor with const int for handling NULL
	Method(const int null);

	//Set the stub
	void setStub(Method_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	Method& operator=(const Method& copy);

	//operator= for NULL
	Method& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(Method& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(Method& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}}} //Close namespace



#endif
