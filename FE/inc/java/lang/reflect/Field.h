///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.lang.reflect.Field



#if !defined JAVA_LANG_REFLECT_FIELD_H
	#define JAVA_LANG_REFLECT_FIELD_H


#include "java/lang/reflect/Field_stub.h"


//These incudes are needed for the methods of the Stub
#include "com/mintech/utils/fmi/builtin/arrays/FObjectArray.h"


namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class JNIException;
}}}}

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class FMIException;
}}}}

namespace java{
	namespace lang{
		namespace reflect{
class AccessibleObject;
}}} //Close namespace


using namespace com::mintech::utils::fmi;
using namespace java::lang::reflect;

namespace java{
	namespace lang{
		namespace reflect{

class Field;


class DLL_EXPORT Field : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//Field Public methods
	jint getModifiers();

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	bool getBoolean(const Object& p1);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	short getByte(const Object& p1);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	jshort getShort(const Object& p1);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	jchar getChar(const Object& p1);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	jint getInt(const Object& p1);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	jlong getLong(const Object& p1);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	jfloat getFloat(const Object& p1);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	jdouble getDouble(const Object& p1);

	string getName();

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	java::lang::Object get(const Object& p1);

	java::lang::annotation::Annotation getAnnotation(const Class& p1);

	FObjectArray getDeclaredAnnotations();

	java::lang::Class getDeclaringClass();

	bool isSynthetic();

	java::lang::reflect::Type getGenericType();

	java::lang::Class getType();

	bool isEnumConstant();

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	void set(const Object& p1, const Object& p2);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	void setBoolean(const Object& p1, const jboolean p2);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	void setByte(const Object& p1, const jbyte p2);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	void setChar(const Object& p1, const jchar p2);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	void setDouble(const Object& p1, const jdouble p2);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	void setFloat(const Object& p1, const jfloat p2);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	void setInt(const Object& p1, const jint p2);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	void setLong(const Object& p1, const jlong p2);

	/* throws java.lang.IllegalArgumentException, java.lang.IllegalAccessException */
	void setShort(const Object& p1, const jshort p2);

	string toGenericString();

	FObjectArray getAnnotations();

	bool isAnnotationPresent(const Class& p1);

	bool isAccessible();

	/* throws java.lang.SecurityException */
	void setAccessible(const jboolean p1);

//End of Field Public methods

//Public data members methods
	//Public data members retrieval methods
	//'final' fields
	static jint get_PUBLIC();

	static jint get_DECLARED();

	//Public data members set methods
//End public data members methods
//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	Field();

	//Copy constructor
	Field(const Field& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	Field(Field_stub* stub);

	//Constructor with jobject for returned objects
	Field(jobject obj);

	//Constructor with const int for handling NULL
	Field(const int null);

	//Set the stub
	void setStub(Field_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	Field& operator=(const Field& copy);

	//operator= for NULL
	Field& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(Field& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(Field& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}}} //Close namespace



#endif
