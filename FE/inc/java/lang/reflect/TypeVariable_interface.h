///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//It represents the Java object 'TypeVariable_interface'.
//This file includs the necessary wrappings for the JNI calls to the Java object.

#if !defined JAVA_LANG_REFLECT_TYPEVARIABLE_INTERFACE_H
#define JAVA_LANG_REFLECT_TYPEVARIABLE_INTERFACE_H

#include "com/mintech/utils/fmi/JNIException.h"
#include "com/mintech/utils/fmi/JNIError.h"
#include "com/mintech/utils/fmi/FMIException.h"
#include "java/lang/Object_interface.h"
#include "java/lang/reflect/Type_interface.h"

#include "com/mintech/utils/fmi/builtin/arrays/FObjectArray.h"

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class JNIException;
}}}}

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class FMIException;
}}}}

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
				namespace builtin{
					namespace arrays{
class FObjectArray;
}}}}}} //Close namespace

namespace java{
	namespace lang{
		namespace reflect{
class Type;
}}} //Close namespace

namespace java{
	namespace lang{
		namespace reflect{
class GenericDeclaration;
}}} //Close namespace

namespace java{
	namespace lang{
		namespace reflect{
class Type_interface;
}}} //Close namespace

using namespace com::mintech::utils::fmi;
using namespace com::mintech::utils::fmi::builtin::arrays;
using namespace java::lang::reflect;

namespace java{
	namespace lang{
		namespace reflect{
class TypeVariable_interface;

class DLL_EXPORT TypeVariable_interface :  public java::lang::reflect::Type_interface
{
public:
//Public Methods
	//Destructor
	virtual ~TypeVariable_interface() { }

	virtual string getName() = 0;

	virtual FObjectArray getBounds() = 0;

	virtual java::lang::reflect::GenericDeclaration getGenericDeclaration() = 0;

	//get method for the object name
	virtual const char* getFullName() = 0;

	//get / set methods for the Java object reference
	virtual jobject getReference() const		{ return m_ref;	}

	virtual void setReference(jobject ref)		{ m_ref = ref;	}

};

}}} //Close namespace



#endif
