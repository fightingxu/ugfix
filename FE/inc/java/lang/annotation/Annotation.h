///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.lang.annotation.Annotation

#if !defined JAVA_LANG_ANNOTATION_ANNOTATION_H
#define JAVA_LANG_ANNOTATION_ANNOTATION_H

#include "java/lang/annotation/Annotation_stub.h"

//These incudes are needed for the methods of the Stub
#include "java/lang/annotation/Annotation_interface.h"

using namespace com::mintech::utils::fmi;

namespace java{
	namespace lang{
		namespace annotation{
class Annotation;

class DLL_EXPORT Annotation : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object

//Annotation Public methods
	java::lang::Class annotationType();

//End of Annotation Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	Annotation();

	//Copy constructor
	Annotation(const Annotation& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	Annotation(Annotation_stub* stub);

	//Constructor with jobject for returned objects
	Annotation(jobject obj);

	//Constructor with const int for handling NULL
	Annotation(const int null);

	//Set the stub
	void setStub(Annotation_interface* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	Annotation& operator=(const Annotation& copy);

	//operator= for NULL
	Annotation& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(Annotation& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(Annotation& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);

	//Casting methods
	static Annotation castFrom_Object(const Object& base);
};


}}} //Close namespace



#endif
