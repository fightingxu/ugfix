///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.lang.ClassLoader



#if !defined JAVA_LANG_CLASSLOADER_H
	#define JAVA_LANG_CLASSLOADER_H


#include "java/lang/ClassLoader_stub.h"


//These incudes are needed for the methods of the Stub


using namespace com::mintech::utils::fmi;

namespace java{
	namespace lang{

class ClassLoader;


class DLL_EXPORT ClassLoader : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//ClassLoader Public methods
	/* throws java.lang.ClassNotFoundException */
	java::lang::Class loadClass(const string& p1);

	static 	java::lang::ClassLoader getSystemClassLoader();

	java::net::URL getResource(const string& p1);

	java::io::InputStream getResourceAsStream(const string& p1);

	static 	java::net::URL getSystemResource(const string& p1);

	static 	java::io::InputStream getSystemResourceAsStream(const string& p1);

	void clearAssertionStatus();

	java::lang::ClassLoader getParent();

	/* throws java.io.IOException */
	java::util::Enumeration getResources(const string& p1);

	/* throws java.io.IOException */
	static 	java::util::Enumeration getSystemResources(const string& p1);

	void setClassAssertionStatus(const string& p1, const jboolean p2);

	void setDefaultAssertionStatus(const jboolean p1);

	void setPackageAssertionStatus(const string& p1, const jboolean p2);

//End of ClassLoader Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	ClassLoader();

	//Copy constructor
	ClassLoader(const ClassLoader& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	ClassLoader(ClassLoader_stub* stub);

	//Constructor with jobject for returned objects
	ClassLoader(jobject obj);

	//Constructor with const int for handling NULL
	ClassLoader(const int null);

	//Set the stub
	void setStub(ClassLoader_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	ClassLoader& operator=(const ClassLoader& copy);

	//operator= for NULL
	ClassLoader& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(ClassLoader& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(ClassLoader& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}} //Close namespace



#endif
