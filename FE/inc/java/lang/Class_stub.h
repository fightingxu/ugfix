///////////////////////////////////////////////////////////////////////
// this header file was generated by FMI code generator.
// FMI Version: 7.6; Build: 2
// it represents the Java object 'Class'.
// this file includes the necessary wrappings for the JNI calls to the Java object.


#if !defined JAVA_LANGCLASS_STUB_H
	#define JAVA_LANGCLASS_STUB_H


#include "java/lang/Object_interface.h"
#include "com/mintech/utils/fmi/builtin/arrays/FObjectArray.h"

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class JNIException;
}}}}

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
class FMIException;
}}}}

namespace com{
	namespace mintech{
		namespace utils{
			namespace fmi{
				namespace builtin{
					namespace arrays{
class FObjectArray;
}}}}}} // close namespace

namespace java{
	namespace lang{
class Object;
}} // close namespace

namespace java{
	namespace lang{
class Class;
}} // close namespace

namespace java{
	namespace lang{
class ClassLoader;
}} // close namespace

namespace java{
	namespace lang{
		namespace annotation{
class Annotation;
}}} // close namespace

namespace java{
	namespace lang{
		namespace reflect{
class Constructor;
}}} // close namespace

namespace java{
	namespace lang{
		namespace reflect{
class Field;
}}} // close namespace

namespace java{
	namespace lang{
		namespace reflect{
class Method;
}}} // close namespace

namespace java{
	namespace lang{
		namespace reflect{
class Type;
}}} // close namespace

namespace java{
	namespace lang{
class Package;
}} // close namespace

namespace java{
	namespace security{
class ProtectionDomain;
}} // close namespace

namespace java{
	namespace net{
class URL;
}} // close namespace

namespace java{
	namespace io{
class InputStream;
}} // close namespace

namespace java{
	namespace lang{
		namespace reflect{
class TypeVariable;
}}} // close namespace


using com::mintech::utils::fmi::JNIException;
using com::mintech::utils::fmi::builtin::arrays::FObjectArray;
using java::lang::Object;
using java::lang::Class;
using java::lang::ClassLoader;
using java::lang::annotation::Annotation;
using java::lang::reflect::Constructor;
using java::lang::reflect::Method;
using java::lang::reflect::Type;
using java::lang::Package;
using java::security::ProtectionDomain;
using java::net::URL;
using java::io::InputStream;
using java::lang::reflect::TypeVariable;

namespace java{
	namespace lang{
class Class_stub;


class DLL_EXPORT Class_stub : public Object_interface
{
public:
//////////////////////
// public Constructors
// these constructors are for the C++ stubs. They do not create Java objects!

	// default constructor
	Class_stub();

	// constructor with jobject parameter for methods that return this object
	Class_stub(jobject obj);

	// destructor
	~Class_stub();

//////////////////
// utility methods
	// initialize all the IDs
	static void initialize();

	// get the object's full name
	virtual const char* getFullName();

	// get the class holder
	jclass getCls();

// end utility methods
//////////////////////

///////////////////////////////////////
// public methods from java.lang.object
	string toString();


// end of methods from java.lang.Object
///////////////////////////////////////


//////////////////////////////////
//Class Public methods
	bool isInstance(const Object& p1);

	jint getModifiers();

	/* throws java.lang.ClassNotFoundException */
	static 	java::lang::Class forName(const string& p1, const jboolean p2, const ClassLoader& p3);

	/* throws java.lang.ClassNotFoundException */
	static 	java::lang::Class forName(const string& p1);

	string getName();

	java::lang::Class asSubclass(const Class& p1);

	java::lang::Object cast(const Object& p1);

	bool desiredAssertionStatus();

	java::lang::annotation::Annotation getAnnotation(const Class& p1);

	FObjectArray getAnnotations();

	string getCanonicalName();

	java::lang::ClassLoader getClassLoader();

	FObjectArray getClasses();

	java::lang::Class getComponentType();

	/* throws java.lang.SecurityException */
	FObjectArray getConstructors();

	FObjectArray getDeclaredAnnotations();

	/* throws java.lang.SecurityException */
	FObjectArray getDeclaredClasses();

	/* throws java.lang.SecurityException */
	FObjectArray getDeclaredConstructors();

	/* throws java.lang.NoSuchFieldException, java.lang.SecurityException */
	java::lang::reflect::Field getDeclaredField(const string& p1);

	/* throws java.lang.SecurityException */
	FObjectArray getDeclaredFields();

	/* throws java.lang.SecurityException */
	FObjectArray getDeclaredMethods();

	java::lang::Class getDeclaringClass();

	java::lang::Class getEnclosingClass();

	java::lang::reflect::Constructor getEnclosingConstructor();

	java::lang::reflect::Method getEnclosingMethod();

	FObjectArray getEnumConstants();

	/* throws java.lang.NoSuchFieldException, java.lang.SecurityException */
	java::lang::reflect::Field getField(const string& p1);

	/* throws java.lang.SecurityException */
	FObjectArray getFields();

	FObjectArray getGenericInterfaces();

	java::lang::reflect::Type getGenericSuperclass();

	FObjectArray getInterfaces();

	/* throws java.lang.SecurityException */
	FObjectArray getMethods();

	java::lang::Package getPackage();

	java::security::ProtectionDomain getProtectionDomain();

	java::net::URL getResource(const string& p1);

	java::io::InputStream getResourceAsStream(const string& p1);

	FObjectArray getSigners();

	string getSimpleName();

	java::lang::Class getSuperclass();

	FObjectArray getTypeParameters();

	bool isAnnotation();

	bool isAnnotationPresent(const Class& p1);

	bool isAnonymousClass();

	bool isArray();

	bool isAssignableFrom(const Class& p1);

	bool isEnum();

	bool isInterface();

	bool isLocalClass();

	bool isMemberClass();

	bool isPrimitive();

	bool isSynthetic();

	/* throws java.lang.InstantiationException, java.lang.IllegalAccessException */
	java::lang::Object newInstance();

//////////////////////////////////
// end of Class Public methods

//////////////////////////////
// public data members methods
//end public data members methods
/////////////////////////////////

private:
	// indicates if an instance of this stub has already been created
	static bool m_firstTime;

	// class holder (defined static to allow accessibility to static methods)
	static jclass m_cls;

	// the object's full name
	static char* m_objectName;

private:
	// java.lang.Class getName() method's ID
	static jmethodID m_getName_method_ID;

	// java.lang.Object Methods' IDs
	static jmethodID method_1_ID;

	// methods' IDs
	static jmethodID method_2_ID;
	static jmethodID method_3_ID;
	static jmethodID method_4_ID;
	static jmethodID method_5_ID;
	static jmethodID method_6_ID;
	static jmethodID method_7_ID;
	static jmethodID method_8_ID;
	static jmethodID method_9_ID;
	static jmethodID method_10_ID;
	static jmethodID method_11_ID;
	static jmethodID method_12_ID;
	static jmethodID method_13_ID;
	static jmethodID method_14_ID;
	static jmethodID method_15_ID;
	static jmethodID method_16_ID;
	static jmethodID method_17_ID;
	static jmethodID method_18_ID;
	static jmethodID method_19_ID;
	static jmethodID method_20_ID;
	static jmethodID method_21_ID;
	static jmethodID method_22_ID;
	static jmethodID method_23_ID;
	static jmethodID method_24_ID;
	static jmethodID method_25_ID;
	static jmethodID method_26_ID;
	static jmethodID method_27_ID;
	static jmethodID method_28_ID;
	static jmethodID method_29_ID;
	static jmethodID method_30_ID;
	static jmethodID method_31_ID;
	static jmethodID method_32_ID;
	static jmethodID method_33_ID;
	static jmethodID method_34_ID;
	static jmethodID method_35_ID;
	static jmethodID method_36_ID;
	static jmethodID method_37_ID;
	static jmethodID method_38_ID;
	static jmethodID method_39_ID;
	static jmethodID method_40_ID;
	static jmethodID method_41_ID;
	static jmethodID method_42_ID;
	static jmethodID method_43_ID;
	static jmethodID method_44_ID;
	static jmethodID method_45_ID;
	static jmethodID method_46_ID;
	static jmethodID method_47_ID;
	static jmethodID method_48_ID;
	static jmethodID method_49_ID;
	static jmethodID method_50_ID;
	static jmethodID method_51_ID;
	static jmethodID method_52_ID;
	static jmethodID method_53_ID;

};


}} // close namespace

#endif
