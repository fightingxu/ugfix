///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.security.Timestamp



#if !defined JAVA_SECURITY_TIMESTAMP_H
	#define JAVA_SECURITY_TIMESTAMP_H


#include "java/security/Timestamp_stub.h"


//These incudes are needed for the methods of the Stub


using namespace com::mintech::utils::fmi;

namespace java{
	namespace security{

class Timestamp;


class DLL_EXPORT Timestamp : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//Timestamp Public methods
	java::security::cert::CertPath getSignerCertPath();

	java::util::Date getTimestamp();

//End of Timestamp Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	Timestamp();

	//Copy constructor
	Timestamp(const Timestamp& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	Timestamp(Timestamp_stub* stub);

	//Constructor with jobject for returned objects
	Timestamp(jobject obj);

	//Constructor with const int for handling NULL
	Timestamp(const int null);

	//Set the stub
	void setStub(Timestamp_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	Timestamp& operator=(const Timestamp& copy);

	//operator= for NULL
	Timestamp& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(Timestamp& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(Timestamp& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}} //Close namespace



#endif
