///////////////////////////////////////////////////////////////////////
//This header file was generated by FMI code generator.
//FMI Version: 7.6; Build: 2
//This is the declaration of the smart pointer for class 'java.security.cert.CertPath



#if !defined JAVA_SECURITY_CERT_CERTPATH_H
	#define JAVA_SECURITY_CERT_CERTPATH_H


#include "java/security/cert/CertPath_stub.h"


//These incudes are needed for the methods of the Stub
#include "com/mintech/utils/fmi/builtin/arrays/FByteArray.h"


using namespace com::mintech::utils::fmi;

namespace java{
	namespace security{
		namespace cert{

class CertPath;


class DLL_EXPORT CertPath : public virtual java::lang::Object
{
public:
/////////////////////
//Public Stub methods

//Public methods from java.lang.object
	string toString();

//End of methods from java.lang.Object


//CertPath Public methods
	java::util::List getCertificates();

	string getType();

	/* throws java.security.cert.CertificateEncodingException */
	FByteArray getEncoded(const string& p1);

	/* throws java.security.cert.CertificateEncodingException */
	FByteArray getEncoded();

	java::util::Iterator getEncodings();

//End of CertPath Public methods

//End public Stub methods

public:
////////////////////////////////
//Internal Smart Pointer methods

	//Constructor / Destructor
	CertPath();

	//Copy constructor
	CertPath(const CertPath& copy);

	//Constructor with stub for returned objects (a new stub should return as a smart pointer)
	CertPath(CertPath_stub* stub);

	//Constructor with jobject for returned objects
	CertPath(jobject obj);

	//Constructor with const int for handling NULL
	CertPath(const int null);

	//Set the stub
	void setStub(CertPath_stub* stub);

	//Get the stub
	Object_interface* getStub() const;

	//operator= for two smart pointers
	CertPath& operator=(const CertPath& copy);

	//operator= for NULL
	CertPath& operator=(const int null);

	//operator== for two smart pointers
	bool operator==(CertPath& obj);

	//operator== for NULL
	bool operator==(const int null);

	//operator!= for two smart pointers
	bool operator!=(CertPath& obj);

	//operator!= for NULL
	bool operator!=(const int null);

	//isInstanceOf: checks if this object is an instance of the class represented by the
	//smart pointer parameter
	bool isInstanceOf(Object& checkObj);

	//isAssignableFrom: checks if this object can be safely cast from checkObj
	static bool isAssignableFrom(const Object& checkObj);
};


}}} //Close namespace



#endif
